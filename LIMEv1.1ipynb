{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "mount_file_id": "1uB4AMfQAC8nbUHb6-Jbz10jNjhVWiuxb",
      "authorship_tag": "ABX9TyOsE6Se/I/U778gGqhdAg9Q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "f61292d94d71444d9617c8318b92663d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6d912ec88af541d1aa5613bb417f2897",
              "IPY_MODEL_f59b3761a64e4cd7b89b7bb737b535df",
              "IPY_MODEL_61bbc9c2eff644fea0a8d0d60baf0b2f"
            ],
            "layout": "IPY_MODEL_8f4e5329b7dd46c0b91d0b7e0467e50b"
          }
        },
        "6d912ec88af541d1aa5613bb417f2897": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_22d751e595ad45c59dcf09e0adafa9e1",
            "placeholder": "​",
            "style": "IPY_MODEL_f12229f6afe640fca77d87c20e289565",
            "value": "100%"
          }
        },
        "f59b3761a64e4cd7b89b7bb737b535df": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_11bc067b2be74e13b9629035fc8db07b",
            "max": 1000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_897c721c84d844ef8b4fd3657cb8cf4d",
            "value": 1000
          }
        },
        "61bbc9c2eff644fea0a8d0d60baf0b2f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_90810e59c5f4430ea953401ffbc6af3f",
            "placeholder": "​",
            "style": "IPY_MODEL_2010728a02944a5fb612ce02eff172e7",
            "value": " 1000/1000 [00:08&lt;00:00, 155.39it/s]"
          }
        },
        "8f4e5329b7dd46c0b91d0b7e0467e50b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "22d751e595ad45c59dcf09e0adafa9e1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f12229f6afe640fca77d87c20e289565": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "11bc067b2be74e13b9629035fc8db07b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "897c721c84d844ef8b4fd3657cb8cf4d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "90810e59c5f4430ea953401ffbc6af3f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2010728a02944a5fb612ce02eff172e7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "209519cd57ae42f195bea6bccbc2a4e3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6f07eb3c57554694b3785013bba8dab9",
              "IPY_MODEL_18754a2432684293a9b426224f8ec05d",
              "IPY_MODEL_99d86cdd94b84b1f894984fcbfd105f4"
            ],
            "layout": "IPY_MODEL_a2118a42359a48d0b6498bf0d4d890ae"
          }
        },
        "6f07eb3c57554694b3785013bba8dab9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_290f2943b1f34e76b03f7b697f78b144",
            "placeholder": "​",
            "style": "IPY_MODEL_3e6ea3511fdd471ebdd68d07bc88527b",
            "value": "100%"
          }
        },
        "18754a2432684293a9b426224f8ec05d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2adb89cff23c4c22865233e41034f8db",
            "max": 1000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c709c39b8f124429ab8ad4377ca038f6",
            "value": 1000
          }
        },
        "99d86cdd94b84b1f894984fcbfd105f4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_980d8c39f367474b865d7e918ac92f48",
            "placeholder": "​",
            "style": "IPY_MODEL_5bb3650d20884a5cb0aa3260ea61e73d",
            "value": " 1000/1000 [00:11&lt;00:00, 98.71it/s]"
          }
        },
        "a2118a42359a48d0b6498bf0d4d890ae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "290f2943b1f34e76b03f7b697f78b144": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3e6ea3511fdd471ebdd68d07bc88527b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2adb89cff23c4c22865233e41034f8db": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c709c39b8f124429ab8ad4377ca038f6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "980d8c39f367474b865d7e918ac92f48": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5bb3650d20884a5cb0aa3260ea61e73d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "51a08412bbeb4aae9183861da41d8b1a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e8c90af76875498a93f3882cdd5b838f",
              "IPY_MODEL_bb1a97a407b24df6870557f0fbfb93cb",
              "IPY_MODEL_d7fb84ec3f99420d87e50048b7b2dc60"
            ],
            "layout": "IPY_MODEL_d6e213d966be4e0a87feae902144934b"
          }
        },
        "e8c90af76875498a93f3882cdd5b838f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b16962b58e344c44b3957ef326bbf57e",
            "placeholder": "​",
            "style": "IPY_MODEL_bfe28b2a6b864d588e74e31175d60cd6",
            "value": "100%"
          }
        },
        "bb1a97a407b24df6870557f0fbfb93cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ea87afd6ea98467db083d6617d40816f",
            "max": 1000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e797fc7dcdc742ff852135ee32c8c415",
            "value": 1000
          }
        },
        "d7fb84ec3f99420d87e50048b7b2dc60": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c5b00bf4e41344abbf70e27b1e675184",
            "placeholder": "​",
            "style": "IPY_MODEL_9a4834080cd04aabb65e8920a8b01a27",
            "value": " 1000/1000 [00:10&lt;00:00, 155.10it/s]"
          }
        },
        "d6e213d966be4e0a87feae902144934b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b16962b58e344c44b3957ef326bbf57e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bfe28b2a6b864d588e74e31175d60cd6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ea87afd6ea98467db083d6617d40816f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e797fc7dcdc742ff852135ee32c8c415": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c5b00bf4e41344abbf70e27b1e675184": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9a4834080cd04aabb65e8920a8b01a27": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "12620e05028a4f7db4818f225a26aecb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d3e8d7b606604f028480003bbd72b12a",
              "IPY_MODEL_7672b9579763441d956951bfb39a28d9",
              "IPY_MODEL_d03350d6994a4154ae34765a61faa876"
            ],
            "layout": "IPY_MODEL_d1fb1e46a7fa40d5bf1d700053523a1c"
          }
        },
        "d3e8d7b606604f028480003bbd72b12a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ad90d8b793094e569ad396f8dbe23c91",
            "placeholder": "​",
            "style": "IPY_MODEL_fb09949de77747398fb5cc4c84f99706",
            "value": "100%"
          }
        },
        "7672b9579763441d956951bfb39a28d9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fdf8dc1d27834a8fa659bbd09faafe33",
            "max": 1000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_db49d01d7bab4db5a9e270dd22955d18",
            "value": 1000
          }
        },
        "d03350d6994a4154ae34765a61faa876": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_20b548b643d24202b8112676cc2210e6",
            "placeholder": "​",
            "style": "IPY_MODEL_8d0619192af44ba3abec64b34ef7e19d",
            "value": " 1000/1000 [00:08&lt;00:00, 140.65it/s]"
          }
        },
        "d1fb1e46a7fa40d5bf1d700053523a1c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ad90d8b793094e569ad396f8dbe23c91": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fb09949de77747398fb5cc4c84f99706": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fdf8dc1d27834a8fa659bbd09faafe33": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "db49d01d7bab4db5a9e270dd22955d18": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "20b548b643d24202b8112676cc2210e6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8d0619192af44ba3abec64b34ef7e19d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c35b4848e9ed462fbe7753823a99b6be": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d8857b3345de442f9f59f451334d83fb",
              "IPY_MODEL_1524705a36ed4c52a7fd7c03aaa85b24",
              "IPY_MODEL_d4b6ac9f6f5346bebcee56c9682083bf"
            ],
            "layout": "IPY_MODEL_2abb7308f76640feb40ad72472509e5b"
          }
        },
        "d8857b3345de442f9f59f451334d83fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1b4be7c52c5241ec9f7631a7d5595873",
            "placeholder": "​",
            "style": "IPY_MODEL_550965b0de494b2d88285001b306d3a1",
            "value": "100%"
          }
        },
        "1524705a36ed4c52a7fd7c03aaa85b24": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_36baae01ecd6453b9a0d3cba1f11bef4",
            "max": 1000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2ed352875bea4a588bdc7a30e6b34165",
            "value": 1000
          }
        },
        "d4b6ac9f6f5346bebcee56c9682083bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4a4f636e3049423f859c539d01849447",
            "placeholder": "​",
            "style": "IPY_MODEL_92e83b04598441b1b5cf0d841bcd2900",
            "value": " 1000/1000 [00:10&lt;00:00, 93.20it/s]"
          }
        },
        "2abb7308f76640feb40ad72472509e5b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1b4be7c52c5241ec9f7631a7d5595873": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "550965b0de494b2d88285001b306d3a1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "36baae01ecd6453b9a0d3cba1f11bef4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2ed352875bea4a588bdc7a30e6b34165": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4a4f636e3049423f859c539d01849447": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "92e83b04598441b1b5cf0d841bcd2900": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "df3a3dc7860242afba34c5f51ef4ea79": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_daca027be10547c1b74fa6f91771abef",
              "IPY_MODEL_4daf79aa2ead45eb9321cefbba8e4d09",
              "IPY_MODEL_36f498e7c1774ce5a83297f52e6523de"
            ],
            "layout": "IPY_MODEL_4d06208e4ff04dc99a51b47b77f353fe"
          }
        },
        "daca027be10547c1b74fa6f91771abef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fff8743cc26940e398e0994c67830b82",
            "placeholder": "​",
            "style": "IPY_MODEL_90d30fa1e7864e6cbde6af09c80426ca",
            "value": "100%"
          }
        },
        "4daf79aa2ead45eb9321cefbba8e4d09": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7e05c12229804743b4dd9dbd2be9c52d",
            "max": 1000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8a7a623e6ee04a6681e2f58a056d22c3",
            "value": 1000
          }
        },
        "36f498e7c1774ce5a83297f52e6523de": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_99fcf57c1d0843a7914418c2e4d5849f",
            "placeholder": "​",
            "style": "IPY_MODEL_7d21ba8b24d4401686516e3f9145c9c8",
            "value": " 1000/1000 [00:11&lt;00:00, 112.73it/s]"
          }
        },
        "4d06208e4ff04dc99a51b47b77f353fe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fff8743cc26940e398e0994c67830b82": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "90d30fa1e7864e6cbde6af09c80426ca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7e05c12229804743b4dd9dbd2be9c52d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8a7a623e6ee04a6681e2f58a056d22c3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "99fcf57c1d0843a7914418c2e4d5849f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7d21ba8b24d4401686516e3f9145c9c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f3ffbb686bda43b69fdf01a52b364948": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_0de684dafc1d46c094a23ed36561d1b8",
              "IPY_MODEL_85f91d9ff4934ada8521ab273591d3ad",
              "IPY_MODEL_fd6c96e145a8441485ef5c8716e6d130"
            ],
            "layout": "IPY_MODEL_c3485dafec104f7587c8cb1378e57c89"
          }
        },
        "0de684dafc1d46c094a23ed36561d1b8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4711c3bca0b34a74a8f36009d1fd74a0",
            "placeholder": "​",
            "style": "IPY_MODEL_4469402283194fccacb1eb87e72409da",
            "value": "100%"
          }
        },
        "85f91d9ff4934ada8521ab273591d3ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fa6ca69fbfe44fb5976129637affabae",
            "max": 1000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d8f9f8b97f1d4bb08e7795500477e732",
            "value": 1000
          }
        },
        "fd6c96e145a8441485ef5c8716e6d130": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bb32aff480384649bbe1a4c9a1fda37f",
            "placeholder": "​",
            "style": "IPY_MODEL_b2f268c18b6e4df6bd2cd7c8498a14ad",
            "value": " 1000/1000 [00:18&lt;00:00, 119.38it/s]"
          }
        },
        "c3485dafec104f7587c8cb1378e57c89": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4711c3bca0b34a74a8f36009d1fd74a0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4469402283194fccacb1eb87e72409da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fa6ca69fbfe44fb5976129637affabae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d8f9f8b97f1d4bb08e7795500477e732": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "bb32aff480384649bbe1a4c9a1fda37f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b2f268c18b6e4df6bd2cd7c8498a14ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "89641d74d9954a31bbde5f45c2824e80": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6acdc1c55d0d4bec814f3ce5378e0c24",
              "IPY_MODEL_f0f8c816a65a413a9f09830565ab047c",
              "IPY_MODEL_b3903a96041a42d4b1d02b7d350ee44a"
            ],
            "layout": "IPY_MODEL_f178851dbcb448eab6c12c09fcab26c5"
          }
        },
        "6acdc1c55d0d4bec814f3ce5378e0c24": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9dce20108f014fea82dfb6ecd972f5be",
            "placeholder": "​",
            "style": "IPY_MODEL_8aacc47a4ba249c2afa78b435f47040b",
            "value": "100%"
          }
        },
        "f0f8c816a65a413a9f09830565ab047c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1ebcb691aa184a2fbf9e414624dd49c1",
            "max": 1000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fc337092bfa54ee48312d9820d91c622",
            "value": 1000
          }
        },
        "b3903a96041a42d4b1d02b7d350ee44a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dcd765989be645ce8b2c6260ca974ba0",
            "placeholder": "​",
            "style": "IPY_MODEL_22ddd8463ec046a5832e3baba0d819f1",
            "value": " 1000/1000 [00:11&lt;00:00, 76.38it/s]"
          }
        },
        "f178851dbcb448eab6c12c09fcab26c5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9dce20108f014fea82dfb6ecd972f5be": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8aacc47a4ba249c2afa78b435f47040b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1ebcb691aa184a2fbf9e414624dd49c1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fc337092bfa54ee48312d9820d91c622": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "dcd765989be645ce8b2c6260ca974ba0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "22ddd8463ec046a5832e3baba0d819f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sway-am/interpretability_PV_detection/blob/main/LIMEv1.1ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cEYLAoYD4aEb",
        "outputId": "b5f286dd-ec8c-4dc3-c9c0-f0438a0e5888"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ClvSCTqf4hrM",
        "outputId": "f8ceb1b6-0b4a-4637-c7c8-3dc8750b4ba0"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\n",
            "ls: cannot open directory '.': No such file or directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%cd /content/gdrive/MyDrive/project_folder"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BcCr7Etq417N",
        "outputId": "3fb49188-67cc-4a61-c378-763b3e19bfea"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/gdrive/MyDrive/project_folder\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! git clone https://github.com/zae-bayern/elpv-dataset.git"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ySJkLxUW6q1l",
        "outputId": "b6d00eaa-e441-4300-be60-8688b01c4c22"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'elpv-dataset'...\n",
            "remote: Enumerating objects: 2695, done.\u001b[K\n",
            "remote: Counting objects: 100% (4/4), done.\u001b[K\n",
            "remote: Compressing objects: 100% (3/3), done.\u001b[K\n",
            "remote: Total 2695 (delta 2), reused 1 (delta 1), pack-reused 2691\u001b[K\n",
            "Receiving objects: 100% (2695/2695), 90.79 MiB | 7.97 MiB/s, done.\n",
            "Resolving deltas: 100% (33/33), done.\n",
            "Updating files: 100% (2629/2629), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#code copied from the utils file\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "\n",
        "def load_dataset(fname=None):\n",
        "    if fname is None:\n",
        "        # Assume we are in the utils folder and get the absolute path to the\n",
        "        # parent directory.\n",
        "        __file__ = '/content/gdrive/MyDrive/project_folder/elpv-dataset/doc'\n",
        "        fname = os.path.abspath(os.path.join(__file__,\n",
        "                                             os.path.pardir))\n",
        "        fname = os.path.join(fname, 'labels.csv')\n",
        "\n",
        "    data = np.genfromtxt(fname, dtype=['|S19', '<f8', '|S4'], names=[\n",
        "                         'path', 'probability', 'type'])\n",
        "    image_fnames = np.char.decode(data['path'])\n",
        "    probs = data['probability']\n",
        "    types = np.char.decode(data['type'])\n",
        "\n",
        "    def load_cell_image(fname):\n",
        "        with Image.open(fname) as image:\n",
        "            return np.asarray(image)\n",
        "\n",
        "    dir = os.path.dirname(fname)\n",
        "\n",
        "    images = np.array([load_cell_image(os.path.join(dir, fn))\n",
        "                       for fn in image_fnames])\n",
        "\n",
        "    return images, probs, types"
      ],
      "metadata": {
        "id": "JYCjrSA-6tnh"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "images, proba, types = load_dataset()"
      ],
      "metadata": {
        "id": "kFQLHE754-TP"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.unique(types,return_counts=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fmld0ioP73zM",
        "outputId": "a02d4124-c0c3-4401-d90b-526ee3a6e5a5"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array(['mono', 'poly'], dtype='<U4'), array([1074, 1550]))"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "\n",
        "# Create an empty numpy array to store the resized images\n",
        "resized_images = np.empty((2624, 120, 120))\n",
        "\n",
        "# Loop through each image in the 'images' array and resize it\n",
        "for i in range(images.shape[0]):\n",
        "    # Resize the image using OpenCV\n",
        "    resized_image = cv2.resize(images[i], (120, 120))\n",
        "\n",
        "    # Store the resized image in the new array\n",
        "    resized_images[i] = resized_image\n",
        "\n",
        "del images\n",
        "\n",
        "images = resized_images\n"
      ],
      "metadata": {
        "id": "CvRmfjOrDZsJ"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "images.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AFAr7QbAC5W0",
        "outputId": "d23af885-9f4b-4a05-8a4c-cb0230930b3e"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2624, 120, 120)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2 as cv\n",
        "from google.colab.patches import cv2_imshow\n",
        "# Becuse cv.imshow causes error \" suggesting to use te above\"\n",
        "temp = []\n",
        "for i in range(63):\n",
        "  if types[i] == 'poly' :\n",
        "    temp.append(i)\n",
        "\n",
        "for i in range(3):\n",
        "  cv2_imshow(images[i])\n",
        "  print(proba[i])\n",
        "\n",
        "for i in temp:\n",
        "  cv2_imshow(images[i])\n",
        "  print(proba[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 841
        },
        "id": "l-1_IotO5A1C",
        "outputId": "d2a87a5e-d99d-49f6-b0a5-4ae4388f5ec1"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=L size=120x120>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=L size=120x120>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=L size=120x120>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=L size=120x120>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=L size=120x120>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=L size=120x120>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.unique(proba,return_counts=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HkgxF-Nf5NJg",
        "outputId": "cd94bbb4-9e19-4557-97f9-458d8dec79eb"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.        , 0.33333333, 0.66666667, 1.        ]),\n",
              " array([1508,  295,  106,  715]))"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_types = []\n",
        "for i in range(types.shape[0]):\n",
        "  if types[i] == \"mono\":\n",
        "    new_types.append(0)\n",
        "  else:\n",
        "    new_types.append(1)"
      ],
      "metadata": {
        "id": "B16Z6kSrE_b9"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_types =np.array(new_types)"
      ],
      "metadata": {
        "id": "CugwVf35FTvH"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "types = new_types\n",
        "types"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hc8B5mrSEjx8",
        "outputId": "f30d4407-dd26-4832-cd55-435d6678e692"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, ..., 1, 1, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Checking if the model can disnguish between the two panels, to do so it must focus at the corners and check if it is full or cutout"
      ],
      "metadata": {
        "id": "MKWahRuk8hJz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split( images, types, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "fpavYXkE5Os2"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lUuU5phk5Ovg",
        "outputId": "840eed82-86d2-4cb4-b0a1-9b935da63056"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2099, 120, 120)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gCPmDeNr5Ox9",
        "outputId": "df3e282f-ae95-4ec4-b487-fc6d67e55265"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(525, 120, 120)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = X_train.reshape((-1,120,120,1)).astype('float32') / 255.0\n",
        "X_test = X_test.reshape((-1,120,120,1)).astype('float32') / 255.0"
      ],
      "metadata": {
        "id": "hmurHspT9lkT"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Bw9eHY1BnS_",
        "outputId": "e8b835a8-7c68-46aa-8215-ffcf955d6d1c"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2099, 120, 120, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "def to_rgb(x):\n",
        "    x_rgb = np.zeros((x.shape[0], 120,120, 3))\n",
        "    for i in range(3):\n",
        "        x_rgb[..., i] = x[..., 0]\n",
        "    return x_rgb\n",
        "X_train = to_rgb(X_train)\n",
        "X_test = to_rgb(X_test)"
      ],
      "metadata": {
        "id": "qDWoBgUT5O0k"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Flouk1VE5O27",
        "outputId": "3b75e0d0-36c9-458f-cabf-7ad7a8347a59"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2099, 120, 120, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models"
      ],
      "metadata": {
        "id": "dS6QUhZg5O5i"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization"
      ],
      "metadata": {
        "id": "YKccDL2t5O8O"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "\n",
        "model.add(Conv2D(16 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (120,120,3)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n",
        "\n",
        "model.add(Conv2D(16 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (120,120,3)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n",
        "\n",
        "model.add(Conv2D(32 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n",
        "\n",
        "# model.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n",
        "# model.add(BatchNormalization())\n",
        "# model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n",
        "\n",
        "# model.add(Conv2D(256 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n",
        "# model.add(BatchNormalization())\n",
        "# model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n",
        "\n",
        "\n",
        "model.add(Flatten())\n",
        "model.add(Dense(units = 16 , activation = 'relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(1 , activation = 'sigmoid'))\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9pCGVcRp5O-h",
        "outputId": "9109ebc9-9bf7-4447-d23d-5d0c60aa1995"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 120, 120, 16)      448       \n",
            "                                                                 \n",
            " batch_normalization (Batch  (None, 120, 120, 16)      64        \n",
            " Normalization)                                                  \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2  (None, 60, 60, 16)        0         \n",
            " D)                                                              \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 60, 60, 16)        2320      \n",
            "                                                                 \n",
            " batch_normalization_1 (Bat  (None, 60, 60, 16)        64        \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPoolin  (None, 30, 30, 16)        0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 30, 30, 32)        4640      \n",
            "                                                                 \n",
            " batch_normalization_2 (Bat  (None, 30, 30, 32)        128       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPoolin  (None, 15, 15, 32)        0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 7200)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 16)                115216    \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 16)                0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 1)                 17        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 122897 (480.07 KB)\n",
            "Trainable params: 122769 (479.57 KB)\n",
            "Non-trainable params: 128 (512.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compile the model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "model.compile(optimizer='Adam' , loss = 'binary_crossentropy' , metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "U-UT0f58-E-p"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(X_train,y_train, batch_size = 16 ,epochs = 10 ,validation_data = (X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nOAcTqOK_K_O",
        "outputId": "9122a871-879b-4607-b10e-ff19648d898a"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "132/132 [==============================] - 18s 13ms/step - loss: 0.3228 - accuracy: 0.8475 - val_loss: 3.3119 - val_accuracy: 0.4114\n",
            "Epoch 2/10\n",
            "132/132 [==============================] - 1s 10ms/step - loss: 0.1763 - accuracy: 0.9357 - val_loss: 1.6805 - val_accuracy: 0.5314\n",
            "Epoch 3/10\n",
            "132/132 [==============================] - 1s 10ms/step - loss: 0.1173 - accuracy: 0.9714 - val_loss: 0.0386 - val_accuracy: 0.9905\n",
            "Epoch 4/10\n",
            "132/132 [==============================] - 1s 11ms/step - loss: 0.0722 - accuracy: 0.9776 - val_loss: 0.3540 - val_accuracy: 0.9505\n",
            "Epoch 5/10\n",
            "132/132 [==============================] - 1s 11ms/step - loss: 0.0544 - accuracy: 0.9805 - val_loss: 0.0208 - val_accuracy: 0.9924\n",
            "Epoch 6/10\n",
            "132/132 [==============================] - 1s 9ms/step - loss: 0.0662 - accuracy: 0.9833 - val_loss: 1.2185 - val_accuracy: 0.8552\n",
            "Epoch 7/10\n",
            "132/132 [==============================] - 1s 8ms/step - loss: 0.0624 - accuracy: 0.9771 - val_loss: 3.6000 - val_accuracy: 0.6762\n",
            "Epoch 8/10\n",
            "132/132 [==============================] - 1s 8ms/step - loss: 0.0642 - accuracy: 0.9747 - val_loss: 0.0414 - val_accuracy: 0.9771\n",
            "Epoch 9/10\n",
            "132/132 [==============================] - 1s 8ms/step - loss: 0.0656 - accuracy: 0.9786 - val_loss: 0.0438 - val_accuracy: 0.9867\n",
            "Epoch 10/10\n",
            "132/132 [==============================] - 1s 8ms/step - loss: 0.0562 - accuracy: 0.9828 - val_loss: 0.0213 - val_accuracy: 0.9943\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the training and validation accuracy\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 927
        },
        "id": "nO_hkJiS_0gs",
        "outputId": "9fc7ec0f-3bd0-4ee1-f2c9-40af53b928f4"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = model.predict(X_test)\n",
        "predictions = (predictions > 0.5).astype(int)\n",
        "predictions = predictions.reshape(1, -1)[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S628331MKNbY",
        "outputId": "0335a907-d513-4c14-ae72-6f44333148ad"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "17/17 [==============================] - 0s 7ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report,confusion_matrix\n",
        "print(classification_report(y_test, predictions, target_names = ['mono','poly']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gjKa-lTuKq2_",
        "outputId": "a60119bf-f8fc-4eee-8607-77fab1b1088a"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "        mono       1.00      0.99      0.99       216\n",
            "        poly       0.99      1.00      1.00       309\n",
            "\n",
            "    accuracy                           0.99       525\n",
            "   macro avg       1.00      0.99      0.99       525\n",
            "weighted avg       0.99      0.99      0.99       525\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save(\"interpretability_PV_test2_types.h5\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i13O8miiLH0k",
        "outputId": "c005a9af-cefc-433e-a4c3-dd36a33a694b"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3079: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('interpretability_PV_test2_types.keras')"
      ],
      "metadata": {
        "id": "AlwFxa_BLWY2"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##USING LIME"
      ],
      "metadata": {
        "id": "hht6xsK5K-X2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install lime"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mwyfD39EKxps",
        "outputId": "1547070f-2569-4fcd-85ed-0e0bcc5c8f5d"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting lime\n",
            "  Downloading lime-0.2.0.1.tar.gz (275 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m275.7/275.7 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from lime) (3.7.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from lime) (1.23.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lime) (1.11.4)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from lime) (4.66.1)\n",
            "Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.10/dist-packages (from lime) (1.2.2)\n",
            "Requirement already satisfied: scikit-image>=0.12 in /usr/local/lib/python3.10/dist-packages (from lime) (0.19.3)\n",
            "Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (3.2.1)\n",
            "Requirement already satisfied: pillow!=7.1.0,!=7.1.1,!=8.3.0,>=6.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (9.4.0)\n",
            "Requirement already satisfied: imageio>=2.4.1 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (2.31.6)\n",
            "Requirement already satisfied: tifffile>=2019.7.26 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (2023.9.26)\n",
            "Requirement already satisfied: PyWavelets>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (1.5.0)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from scikit-image>=0.12->lime) (23.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->lime) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18->lime) (3.2.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (4.46.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (1.4.5)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->lime) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->lime) (1.16.0)\n",
            "Building wheels for collected packages: lime\n",
            "  Building wheel for lime (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for lime: filename=lime-0.2.0.1-py3-none-any.whl size=283835 sha256=ab6d2c01c250cb00b764ad4541601d89e7fb6314e0ad815a572baaff16b33c29\n",
            "  Stored in directory: /root/.cache/pip/wheels/fd/a2/af/9ac0a1a85a27f314a06b39e1f492bee1547d52549a4606ed89\n",
            "Successfully built lime\n",
            "Installing collected packages: lime\n",
            "Successfully installed lime-0.2.0.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import lime\n",
        "from lime import lime_image\n",
        "from skimage.segmentation import mark_boundaries\n",
        "import matplotlib.pyplot as plt\n",
        "import random"
      ],
      "metadata": {
        "id": "knx7_TTZLFe1"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = lime_image.LimeImageExplainer(random_state=42)\n",
        "explanation = explainer.explain_instance(\n",
        "         X_train[60],\n",
        "         model.predict\n",
        ")\n",
        "plt.imshow(X_train[60])\n",
        "image, mask = explanation.get_image_and_mask(\n",
        "         model.predict(\n",
        "              X_train[60].reshape((1,120,120,3))\n",
        "         ).argmax(axis=1)[0],\n",
        "         positive_only=False,\n",
        "         hide_rest=False)\n",
        "plt.imshow(mark_boundaries(image, mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "f61292d94d71444d9617c8318b92663d",
            "6d912ec88af541d1aa5613bb417f2897",
            "f59b3761a64e4cd7b89b7bb737b535df",
            "61bbc9c2eff644fea0a8d0d60baf0b2f",
            "8f4e5329b7dd46c0b91d0b7e0467e50b",
            "22d751e595ad45c59dcf09e0adafa9e1",
            "f12229f6afe640fca77d87c20e289565",
            "11bc067b2be74e13b9629035fc8db07b",
            "897c721c84d844ef8b4fd3657cb8cf4d",
            "90810e59c5f4430ea953401ffbc6af3f",
            "2010728a02944a5fb612ce02eff172e7"
          ]
        },
        "id": "_mDma32ILtAQ",
        "outputId": "588cf6a8-5a00-482b-92c6-5ab0bf91e209"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f61292d94d71444d9617c8318b92663d"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79a82103d090>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = lime_image.LimeImageExplainer(random_state=42)\n",
        "explanation = explainer.explain_instance(\n",
        "         X_train[10],\n",
        "         model.predict\n",
        ")\n",
        "plt.imshow(X_train[10])\n",
        "image, mask = explanation.get_image_and_mask(\n",
        "         model.predict(\n",
        "              X_train[10].reshape((1,120,120,3))\n",
        "         ).argmax(axis=1)[0],\n",
        "         positive_only=False,\n",
        "         hide_rest=False)\n",
        "plt.imshow(mark_boundaries(image, mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "209519cd57ae42f195bea6bccbc2a4e3",
            "6f07eb3c57554694b3785013bba8dab9",
            "18754a2432684293a9b426224f8ec05d",
            "99d86cdd94b84b1f894984fcbfd105f4",
            "a2118a42359a48d0b6498bf0d4d890ae",
            "290f2943b1f34e76b03f7b697f78b144",
            "3e6ea3511fdd471ebdd68d07bc88527b",
            "2adb89cff23c4c22865233e41034f8db",
            "c709c39b8f124429ab8ad4377ca038f6",
            "980d8c39f367474b865d7e918ac92f48",
            "5bb3650d20884a5cb0aa3260ea61e73d"
          ]
        },
        "id": "kKu38OjsL9qV",
        "outputId": "ad13c6be-eb16-4d73-d4f5-3c7733e8cb82"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "209519cd57ae42f195bea6bccbc2a4e3"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 81ms/step\n",
            "1/1 [==============================] - 0s 88ms/step\n",
            "1/1 [==============================] - 0s 65ms/step\n",
            "1/1 [==============================] - 0s 91ms/step\n",
            "1/1 [==============================] - 0s 82ms/step\n",
            "1/1 [==============================] - 0s 49ms/step\n",
            "1/1 [==============================] - 0s 52ms/step\n",
            "1/1 [==============================] - 0s 79ms/step\n",
            "1/1 [==============================] - 0s 94ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 73ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 97ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 74ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 71ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79a821330d60>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = lime_image.LimeImageExplainer(random_state=42)\n",
        "explanation = explainer.explain_instance(\n",
        "         X_train[0],\n",
        "         model.predict\n",
        ")\n",
        "plt.imshow(X_train[0])\n",
        "image, mask = explanation.get_image_and_mask(\n",
        "         model.predict(\n",
        "              X_train[0].reshape((1,120,120,3))\n",
        "         ).argmax(axis=1)[0],\n",
        "         positive_only=False,\n",
        "         hide_rest=False)\n",
        "plt.imshow(mark_boundaries(image, mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "51a08412bbeb4aae9183861da41d8b1a",
            "e8c90af76875498a93f3882cdd5b838f",
            "bb1a97a407b24df6870557f0fbfb93cb",
            "d7fb84ec3f99420d87e50048b7b2dc60",
            "d6e213d966be4e0a87feae902144934b",
            "b16962b58e344c44b3957ef326bbf57e",
            "bfe28b2a6b864d588e74e31175d60cd6",
            "ea87afd6ea98467db083d6617d40816f",
            "e797fc7dcdc742ff852135ee32c8c415",
            "c5b00bf4e41344abbf70e27b1e675184",
            "9a4834080cd04aabb65e8920a8b01a27"
          ]
        },
        "id": "dAG5koOKMmOD",
        "outputId": "7f3a89a8-91e4-41f0-fd07-1cfbf6193c26"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "51a08412bbeb4aae9183861da41d8b1a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 108ms/step\n",
            "1/1 [==============================] - 0s 63ms/step\n",
            "1/1 [==============================] - 0s 66ms/step\n",
            "1/1 [==============================] - 0s 81ms/step\n",
            "1/1 [==============================] - 0s 72ms/step\n",
            "1/1 [==============================] - 0s 72ms/step\n",
            "1/1 [==============================] - 0s 64ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 72ms/step\n",
            "1/1 [==============================] - 0s 84ms/step\n",
            "1/1 [==============================] - 0s 76ms/step\n",
            "1/1 [==============================] - 0s 77ms/step\n",
            "1/1 [==============================] - 0s 71ms/step\n",
            "1/1 [==============================] - 0s 87ms/step\n",
            "1/1 [==============================] - 0s 47ms/step\n",
            "1/1 [==============================] - 0s 61ms/step\n",
            "1/1 [==============================] - 0s 57ms/step\n",
            "1/1 [==============================] - 0s 66ms/step\n",
            "1/1 [==============================] - 0s 55ms/step\n",
            "1/1 [==============================] - 0s 58ms/step\n",
            "1/1 [==============================] - 0s 55ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 98ms/step\n",
            "1/1 [==============================] - 0s 53ms/step\n",
            "1/1 [==============================] - 0s 48ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 50ms/step\n",
            "1/1 [==============================] - 0s 75ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79a8216c3eb0>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = lime_image.LimeImageExplainer(random_state=42)\n",
        "explanation = explainer.explain_instance(\n",
        "         X_test[3],\n",
        "         model.predict\n",
        ")\n",
        "plt.imshow(X_test[3])\n",
        "image, mask = explanation.get_image_and_mask(\n",
        "         model.predict(\n",
        "              X_test[3].reshape((1,120,120,3))\n",
        "         ).argmax(axis=1)[0],\n",
        "         positive_only=False,\n",
        "         hide_rest=False)\n",
        "plt.imshow(mark_boundaries(image, mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "12620e05028a4f7db4818f225a26aecb",
            "d3e8d7b606604f028480003bbd72b12a",
            "7672b9579763441d956951bfb39a28d9",
            "d03350d6994a4154ae34765a61faa876",
            "d1fb1e46a7fa40d5bf1d700053523a1c",
            "ad90d8b793094e569ad396f8dbe23c91",
            "fb09949de77747398fb5cc4c84f99706",
            "fdf8dc1d27834a8fa659bbd09faafe33",
            "db49d01d7bab4db5a9e270dd22955d18",
            "20b548b643d24202b8112676cc2210e6",
            "8d0619192af44ba3abec64b34ef7e19d"
          ]
        },
        "id": "XHbcyCkDM2gu",
        "outputId": "7468f2d2-67c3-41ba-9fe3-bba2db6436a7"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "12620e05028a4f7db4818f225a26aecb"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 66ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 54ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79a80deb4c40>"
            ]
          },
          "metadata": {},
          "execution_count": 58
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing performance with ResNet - 50"
      ],
      "metadata": {
        "id": "RfQXK6gLOLAG"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_model():\n",
        "    resnet_model = tf.keras.applications.ResNet50V2(\n",
        "        weights='imagenet',\n",
        "        include_top = False,\n",
        "        input_shape = (120,120,3)\n",
        "    )\n",
        "\n",
        "    for layer in resnet_model.layers:\n",
        "        layer.trainable=False\n",
        "\n",
        "    x = resnet_model.output\n",
        "    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n",
        "    x = tf.keras.layers.Dense(64,activation='relu')(x)\n",
        "    # output layer\n",
        "    predictions = tf.keras.layers.Dense(1,activation='sigmoid')(x)\n",
        "\n",
        "    res_model = tf.keras.Model(inputs=resnet_model.input, outputs=predictions)\n",
        "\n",
        "    # Compiling the model\n",
        "    res_model.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])\n",
        "    return res_model"
      ],
      "metadata": {
        "id": "us0gcLCeRTM9"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "res_model = create_model()"
      ],
      "metadata": {
        "id": "WHkEzKuQRfYT"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "res_model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bo--ooeQRtZa",
        "outputId": "ae443303-976c-44e4-c099-a222c251ebbd"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_1\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " input_2 (InputLayer)        [(None, 120, 120, 3)]        0         []                            \n",
            "                                                                                                  \n",
            " conv1_pad (ZeroPadding2D)   (None, 126, 126, 3)          0         ['input_2[0][0]']             \n",
            "                                                                                                  \n",
            " conv1_conv (Conv2D)         (None, 60, 60, 64)           9472      ['conv1_pad[0][0]']           \n",
            "                                                                                                  \n",
            " pool1_pad (ZeroPadding2D)   (None, 62, 62, 64)           0         ['conv1_conv[0][0]']          \n",
            "                                                                                                  \n",
            " pool1_pool (MaxPooling2D)   (None, 30, 30, 64)           0         ['pool1_pad[0][0]']           \n",
            "                                                                                                  \n",
            " conv2_block1_preact_bn (Ba  (None, 30, 30, 64)           256       ['pool1_pool[0][0]']          \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block1_preact_relu (  (None, 30, 30, 64)           0         ['conv2_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block1_1_conv (Conv2  (None, 30, 30, 64)           4096      ['conv2_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block1_1_bn (BatchNo  (None, 30, 30, 64)           256       ['conv2_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block1_1_relu (Activ  (None, 30, 30, 64)           0         ['conv2_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block1_2_pad (ZeroPa  (None, 32, 32, 64)           0         ['conv2_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block1_2_conv (Conv2  (None, 30, 30, 64)           36864     ['conv2_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block1_2_bn (BatchNo  (None, 30, 30, 64)           256       ['conv2_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block1_2_relu (Activ  (None, 30, 30, 64)           0         ['conv2_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block1_0_conv (Conv2  (None, 30, 30, 256)          16640     ['conv2_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block1_3_conv (Conv2  (None, 30, 30, 256)          16640     ['conv2_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block1_out (Add)      (None, 30, 30, 256)          0         ['conv2_block1_0_conv[0][0]', \n",
            "                                                                     'conv2_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv2_block2_preact_bn (Ba  (None, 30, 30, 256)          1024      ['conv2_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block2_preact_relu (  (None, 30, 30, 256)          0         ['conv2_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block2_1_conv (Conv2  (None, 30, 30, 64)           16384     ['conv2_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block2_1_bn (BatchNo  (None, 30, 30, 64)           256       ['conv2_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block2_1_relu (Activ  (None, 30, 30, 64)           0         ['conv2_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block2_2_pad (ZeroPa  (None, 32, 32, 64)           0         ['conv2_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block2_2_conv (Conv2  (None, 30, 30, 64)           36864     ['conv2_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block2_2_bn (BatchNo  (None, 30, 30, 64)           256       ['conv2_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block2_2_relu (Activ  (None, 30, 30, 64)           0         ['conv2_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block2_3_conv (Conv2  (None, 30, 30, 256)          16640     ['conv2_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block2_out (Add)      (None, 30, 30, 256)          0         ['conv2_block1_out[0][0]',    \n",
            "                                                                     'conv2_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv2_block3_preact_bn (Ba  (None, 30, 30, 256)          1024      ['conv2_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2_block3_preact_relu (  (None, 30, 30, 256)          0         ['conv2_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv2_block3_1_conv (Conv2  (None, 30, 30, 64)           16384     ['conv2_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv2_block3_1_bn (BatchNo  (None, 30, 30, 64)           256       ['conv2_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block3_1_relu (Activ  (None, 30, 30, 64)           0         ['conv2_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv2_block3_2_pad (ZeroPa  (None, 32, 32, 64)           0         ['conv2_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv2_block3_2_conv (Conv2  (None, 15, 15, 64)           36864     ['conv2_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block3_2_bn (BatchNo  (None, 15, 15, 64)           256       ['conv2_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2_block3_2_relu (Activ  (None, 15, 15, 64)           0         ['conv2_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_6 (MaxPoolin  (None, 15, 15, 256)          0         ['conv2_block2_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv2_block3_3_conv (Conv2  (None, 15, 15, 256)          16640     ['conv2_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2_block3_out (Add)      (None, 15, 15, 256)          0         ['max_pooling2d_6[0][0]',     \n",
            "                                                                     'conv2_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block1_preact_bn (Ba  (None, 15, 15, 256)          1024      ['conv2_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block1_preact_relu (  (None, 15, 15, 256)          0         ['conv3_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block1_1_conv (Conv2  (None, 15, 15, 128)          32768     ['conv3_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block1_1_bn (BatchNo  (None, 15, 15, 128)          512       ['conv3_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block1_1_relu (Activ  (None, 15, 15, 128)          0         ['conv3_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block1_2_pad (ZeroPa  (None, 17, 17, 128)          0         ['conv3_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block1_2_conv (Conv2  (None, 15, 15, 128)          147456    ['conv3_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block1_2_bn (BatchNo  (None, 15, 15, 128)          512       ['conv3_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block1_2_relu (Activ  (None, 15, 15, 128)          0         ['conv3_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block1_0_conv (Conv2  (None, 15, 15, 512)          131584    ['conv3_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block1_3_conv (Conv2  (None, 15, 15, 512)          66048     ['conv3_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block1_out (Add)      (None, 15, 15, 512)          0         ['conv3_block1_0_conv[0][0]', \n",
            "                                                                     'conv3_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block2_preact_bn (Ba  (None, 15, 15, 512)          2048      ['conv3_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block2_preact_relu (  (None, 15, 15, 512)          0         ['conv3_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block2_1_conv (Conv2  (None, 15, 15, 128)          65536     ['conv3_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block2_1_bn (BatchNo  (None, 15, 15, 128)          512       ['conv3_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block2_1_relu (Activ  (None, 15, 15, 128)          0         ['conv3_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block2_2_pad (ZeroPa  (None, 17, 17, 128)          0         ['conv3_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block2_2_conv (Conv2  (None, 15, 15, 128)          147456    ['conv3_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block2_2_bn (BatchNo  (None, 15, 15, 128)          512       ['conv3_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block2_2_relu (Activ  (None, 15, 15, 128)          0         ['conv3_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block2_3_conv (Conv2  (None, 15, 15, 512)          66048     ['conv3_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block2_out (Add)      (None, 15, 15, 512)          0         ['conv3_block1_out[0][0]',    \n",
            "                                                                     'conv3_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block3_preact_bn (Ba  (None, 15, 15, 512)          2048      ['conv3_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block3_preact_relu (  (None, 15, 15, 512)          0         ['conv3_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block3_1_conv (Conv2  (None, 15, 15, 128)          65536     ['conv3_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block3_1_bn (BatchNo  (None, 15, 15, 128)          512       ['conv3_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block3_1_relu (Activ  (None, 15, 15, 128)          0         ['conv3_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block3_2_pad (ZeroPa  (None, 17, 17, 128)          0         ['conv3_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block3_2_conv (Conv2  (None, 15, 15, 128)          147456    ['conv3_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block3_2_bn (BatchNo  (None, 15, 15, 128)          512       ['conv3_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block3_2_relu (Activ  (None, 15, 15, 128)          0         ['conv3_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block3_3_conv (Conv2  (None, 15, 15, 512)          66048     ['conv3_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block3_out (Add)      (None, 15, 15, 512)          0         ['conv3_block2_out[0][0]',    \n",
            "                                                                     'conv3_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv3_block4_preact_bn (Ba  (None, 15, 15, 512)          2048      ['conv3_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv3_block4_preact_relu (  (None, 15, 15, 512)          0         ['conv3_block4_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv3_block4_1_conv (Conv2  (None, 15, 15, 128)          65536     ['conv3_block4_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv3_block4_1_bn (BatchNo  (None, 15, 15, 128)          512       ['conv3_block4_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block4_1_relu (Activ  (None, 15, 15, 128)          0         ['conv3_block4_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv3_block4_2_pad (ZeroPa  (None, 17, 17, 128)          0         ['conv3_block4_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv3_block4_2_conv (Conv2  (None, 8, 8, 128)            147456    ['conv3_block4_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block4_2_bn (BatchNo  (None, 8, 8, 128)            512       ['conv3_block4_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv3_block4_2_relu (Activ  (None, 8, 8, 128)            0         ['conv3_block4_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_7 (MaxPoolin  (None, 8, 8, 512)            0         ['conv3_block3_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv3_block4_3_conv (Conv2  (None, 8, 8, 512)            66048     ['conv3_block4_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv3_block4_out (Add)      (None, 8, 8, 512)            0         ['max_pooling2d_7[0][0]',     \n",
            "                                                                     'conv3_block4_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block1_preact_bn (Ba  (None, 8, 8, 512)            2048      ['conv3_block4_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block1_preact_relu (  (None, 8, 8, 512)            0         ['conv4_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block1_1_conv (Conv2  (None, 8, 8, 256)            131072    ['conv4_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block1_1_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block1_1_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block1_2_pad (ZeroPa  (None, 10, 10, 256)          0         ['conv4_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block1_2_conv (Conv2  (None, 8, 8, 256)            589824    ['conv4_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block1_2_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block1_2_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block1_0_conv (Conv2  (None, 8, 8, 1024)           525312    ['conv4_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block1_3_conv (Conv2  (None, 8, 8, 1024)           263168    ['conv4_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block1_out (Add)      (None, 8, 8, 1024)           0         ['conv4_block1_0_conv[0][0]', \n",
            "                                                                     'conv4_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block2_preact_bn (Ba  (None, 8, 8, 1024)           4096      ['conv4_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block2_preact_relu (  (None, 8, 8, 1024)           0         ['conv4_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block2_1_conv (Conv2  (None, 8, 8, 256)            262144    ['conv4_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block2_1_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block2_1_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block2_2_pad (ZeroPa  (None, 10, 10, 256)          0         ['conv4_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block2_2_conv (Conv2  (None, 8, 8, 256)            589824    ['conv4_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block2_2_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block2_2_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block2_3_conv (Conv2  (None, 8, 8, 1024)           263168    ['conv4_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block2_out (Add)      (None, 8, 8, 1024)           0         ['conv4_block1_out[0][0]',    \n",
            "                                                                     'conv4_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block3_preact_bn (Ba  (None, 8, 8, 1024)           4096      ['conv4_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block3_preact_relu (  (None, 8, 8, 1024)           0         ['conv4_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block3_1_conv (Conv2  (None, 8, 8, 256)            262144    ['conv4_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block3_1_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block3_1_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block3_2_pad (ZeroPa  (None, 10, 10, 256)          0         ['conv4_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block3_2_conv (Conv2  (None, 8, 8, 256)            589824    ['conv4_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block3_2_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block3_2_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block3_3_conv (Conv2  (None, 8, 8, 1024)           263168    ['conv4_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block3_out (Add)      (None, 8, 8, 1024)           0         ['conv4_block2_out[0][0]',    \n",
            "                                                                     'conv4_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block4_preact_bn (Ba  (None, 8, 8, 1024)           4096      ['conv4_block3_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block4_preact_relu (  (None, 8, 8, 1024)           0         ['conv4_block4_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block4_1_conv (Conv2  (None, 8, 8, 256)            262144    ['conv4_block4_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block4_1_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block4_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block4_1_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block4_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block4_2_pad (ZeroPa  (None, 10, 10, 256)          0         ['conv4_block4_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block4_2_conv (Conv2  (None, 8, 8, 256)            589824    ['conv4_block4_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block4_2_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block4_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block4_2_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block4_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block4_3_conv (Conv2  (None, 8, 8, 1024)           263168    ['conv4_block4_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block4_out (Add)      (None, 8, 8, 1024)           0         ['conv4_block3_out[0][0]',    \n",
            "                                                                     'conv4_block4_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block5_preact_bn (Ba  (None, 8, 8, 1024)           4096      ['conv4_block4_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block5_preact_relu (  (None, 8, 8, 1024)           0         ['conv4_block5_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block5_1_conv (Conv2  (None, 8, 8, 256)            262144    ['conv4_block5_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block5_1_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block5_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block5_1_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block5_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block5_2_pad (ZeroPa  (None, 10, 10, 256)          0         ['conv4_block5_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block5_2_conv (Conv2  (None, 8, 8, 256)            589824    ['conv4_block5_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block5_2_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block5_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block5_2_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block5_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block5_3_conv (Conv2  (None, 8, 8, 1024)           263168    ['conv4_block5_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block5_out (Add)      (None, 8, 8, 1024)           0         ['conv4_block4_out[0][0]',    \n",
            "                                                                     'conv4_block5_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv4_block6_preact_bn (Ba  (None, 8, 8, 1024)           4096      ['conv4_block5_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv4_block6_preact_relu (  (None, 8, 8, 1024)           0         ['conv4_block6_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv4_block6_1_conv (Conv2  (None, 8, 8, 256)            262144    ['conv4_block6_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv4_block6_1_bn (BatchNo  (None, 8, 8, 256)            1024      ['conv4_block6_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block6_1_relu (Activ  (None, 8, 8, 256)            0         ['conv4_block6_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv4_block6_2_pad (ZeroPa  (None, 10, 10, 256)          0         ['conv4_block6_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv4_block6_2_conv (Conv2  (None, 4, 4, 256)            589824    ['conv4_block6_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block6_2_bn (BatchNo  (None, 4, 4, 256)            1024      ['conv4_block6_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv4_block6_2_relu (Activ  (None, 4, 4, 256)            0         ['conv4_block6_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " max_pooling2d_8 (MaxPoolin  (None, 4, 4, 1024)           0         ['conv4_block5_out[0][0]']    \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv4_block6_3_conv (Conv2  (None, 4, 4, 1024)           263168    ['conv4_block6_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv4_block6_out (Add)      (None, 4, 4, 1024)           0         ['max_pooling2d_8[0][0]',     \n",
            "                                                                     'conv4_block6_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block1_preact_bn (Ba  (None, 4, 4, 1024)           4096      ['conv4_block6_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block1_preact_relu (  (None, 4, 4, 1024)           0         ['conv5_block1_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block1_1_conv (Conv2  (None, 4, 4, 512)            524288    ['conv5_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block1_1_bn (BatchNo  (None, 4, 4, 512)            2048      ['conv5_block1_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block1_1_relu (Activ  (None, 4, 4, 512)            0         ['conv5_block1_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block1_2_pad (ZeroPa  (None, 6, 6, 512)            0         ['conv5_block1_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block1_2_conv (Conv2  (None, 4, 4, 512)            2359296   ['conv5_block1_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block1_2_bn (BatchNo  (None, 4, 4, 512)            2048      ['conv5_block1_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block1_2_relu (Activ  (None, 4, 4, 512)            0         ['conv5_block1_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block1_0_conv (Conv2  (None, 4, 4, 2048)           2099200   ['conv5_block1_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block1_3_conv (Conv2  (None, 4, 4, 2048)           1050624   ['conv5_block1_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block1_out (Add)      (None, 4, 4, 2048)           0         ['conv5_block1_0_conv[0][0]', \n",
            "                                                                     'conv5_block1_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block2_preact_bn (Ba  (None, 4, 4, 2048)           8192      ['conv5_block1_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block2_preact_relu (  (None, 4, 4, 2048)           0         ['conv5_block2_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block2_1_conv (Conv2  (None, 4, 4, 512)            1048576   ['conv5_block2_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block2_1_bn (BatchNo  (None, 4, 4, 512)            2048      ['conv5_block2_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block2_1_relu (Activ  (None, 4, 4, 512)            0         ['conv5_block2_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block2_2_pad (ZeroPa  (None, 6, 6, 512)            0         ['conv5_block2_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block2_2_conv (Conv2  (None, 4, 4, 512)            2359296   ['conv5_block2_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block2_2_bn (BatchNo  (None, 4, 4, 512)            2048      ['conv5_block2_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block2_2_relu (Activ  (None, 4, 4, 512)            0         ['conv5_block2_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block2_3_conv (Conv2  (None, 4, 4, 2048)           1050624   ['conv5_block2_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block2_out (Add)      (None, 4, 4, 2048)           0         ['conv5_block1_out[0][0]',    \n",
            "                                                                     'conv5_block2_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " conv5_block3_preact_bn (Ba  (None, 4, 4, 2048)           8192      ['conv5_block2_out[0][0]']    \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv5_block3_preact_relu (  (None, 4, 4, 2048)           0         ['conv5_block3_preact_bn[0][0]\n",
            " Activation)                                                        ']                            \n",
            "                                                                                                  \n",
            " conv5_block3_1_conv (Conv2  (None, 4, 4, 512)            1048576   ['conv5_block3_preact_relu[0][\n",
            " D)                                                                 0]']                          \n",
            "                                                                                                  \n",
            " conv5_block3_1_bn (BatchNo  (None, 4, 4, 512)            2048      ['conv5_block3_1_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block3_1_relu (Activ  (None, 4, 4, 512)            0         ['conv5_block3_1_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block3_2_pad (ZeroPa  (None, 6, 6, 512)            0         ['conv5_block3_1_relu[0][0]'] \n",
            " dding2D)                                                                                         \n",
            "                                                                                                  \n",
            " conv5_block3_2_conv (Conv2  (None, 4, 4, 512)            2359296   ['conv5_block3_2_pad[0][0]']  \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block3_2_bn (BatchNo  (None, 4, 4, 512)            2048      ['conv5_block3_2_conv[0][0]'] \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv5_block3_2_relu (Activ  (None, 4, 4, 512)            0         ['conv5_block3_2_bn[0][0]']   \n",
            " ation)                                                                                           \n",
            "                                                                                                  \n",
            " conv5_block3_3_conv (Conv2  (None, 4, 4, 2048)           1050624   ['conv5_block3_2_relu[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv5_block3_out (Add)      (None, 4, 4, 2048)           0         ['conv5_block2_out[0][0]',    \n",
            "                                                                     'conv5_block3_3_conv[0][0]'] \n",
            "                                                                                                  \n",
            " post_bn (BatchNormalizatio  (None, 4, 4, 2048)           8192      ['conv5_block3_out[0][0]']    \n",
            " n)                                                                                               \n",
            "                                                                                                  \n",
            " post_relu (Activation)      (None, 4, 4, 2048)           0         ['post_bn[0][0]']             \n",
            "                                                                                                  \n",
            " global_average_pooling2d_1  (None, 2048)                 0         ['post_relu[0][0]']           \n",
            "  (GlobalAveragePooling2D)                                                                        \n",
            "                                                                                                  \n",
            " dense_4 (Dense)             (None, 64)                   131136    ['global_average_pooling2d_1[0\n",
            "                                                                    ][0]']                        \n",
            "                                                                                                  \n",
            " dense_5 (Dense)             (None, 1)                    65        ['dense_4[0][0]']             \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 23696001 (90.39 MB)\n",
            "Trainable params: 131201 (512.50 KB)\n",
            "Non-trainable params: 23564800 (89.89 MB)\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history = res_model.fit(X_train,y_train, batch_size = 16 ,epochs = 10 ,validation_data = (X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "srQlcgtYRzlx",
        "outputId": "c54298c3-00e4-4624-bea4-45f6d7e638b6"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "132/132 [==============================] - 14s 42ms/step - loss: 0.0244 - accuracy: 0.9929 - val_loss: 0.0023 - val_accuracy: 1.0000\n",
            "Epoch 2/10\n",
            "132/132 [==============================] - 4s 31ms/step - loss: 9.2212e-04 - accuracy: 1.0000 - val_loss: 0.0014 - val_accuracy: 1.0000\n",
            "Epoch 3/10\n",
            "132/132 [==============================] - 4s 29ms/step - loss: 3.0424e-04 - accuracy: 1.0000 - val_loss: 8.1791e-04 - val_accuracy: 1.0000\n",
            "Epoch 4/10\n",
            "132/132 [==============================] - 4s 31ms/step - loss: 1.3071e-04 - accuracy: 1.0000 - val_loss: 6.9146e-04 - val_accuracy: 1.0000\n",
            "Epoch 5/10\n",
            "132/132 [==============================] - 3s 26ms/step - loss: 8.8517e-05 - accuracy: 1.0000 - val_loss: 5.6788e-04 - val_accuracy: 1.0000\n",
            "Epoch 6/10\n",
            "132/132 [==============================] - 4s 31ms/step - loss: 6.8337e-05 - accuracy: 1.0000 - val_loss: 5.7094e-04 - val_accuracy: 1.0000\n",
            "Epoch 7/10\n",
            "132/132 [==============================] - 4s 33ms/step - loss: 5.2702e-05 - accuracy: 1.0000 - val_loss: 5.0751e-04 - val_accuracy: 1.0000\n",
            "Epoch 8/10\n",
            "132/132 [==============================] - 3s 26ms/step - loss: 4.2130e-05 - accuracy: 1.0000 - val_loss: 4.6594e-04 - val_accuracy: 1.0000\n",
            "Epoch 9/10\n",
            "132/132 [==============================] - 3s 26ms/step - loss: 3.4535e-05 - accuracy: 1.0000 - val_loss: 4.9256e-04 - val_accuracy: 1.0000\n",
            "Epoch 10/10\n",
            "132/132 [==============================] - 3s 26ms/step - loss: 2.8610e-05 - accuracy: 1.0000 - val_loss: 4.6798e-04 - val_accuracy: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the training and validation accuracy\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 927
        },
        "id": "CJYtmCdsSt4X",
        "outputId": "c121b1fa-9ae8-4b50-e763-f9250033338f"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = res_model.predict(X_test)\n",
        "predictions = (predictions > 0.5).astype(int)\n",
        "predictions = predictions.reshape(1, -1)[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xxg5wKIwTZ6S",
        "outputId": "878bda79-4869-45f7-cf68-73ba9aba0378"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "17/17 [==============================] - 3s 32ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report,confusion_matrix\n",
        "print(classification_report(y_test, predictions, target_names = ['mono','poly']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_dRcQMxrTHQ7",
        "outputId": "adcbb559-8c74-4f2d-d1eb-4e083acb304f"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "        mono       1.00      1.00      1.00       216\n",
            "        poly       1.00      1.00      1.00       309\n",
            "\n",
            "    accuracy                           1.00       525\n",
            "   macro avg       1.00      1.00      1.00       525\n",
            "weighted avg       1.00      1.00      1.00       525\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = lime_image.LimeImageExplainer(random_state=42)\n",
        "explanation = explainer.explain_instance(\n",
        "         X_train[60],\n",
        "         res_model.predict\n",
        ")\n",
        "plt.imshow(X_train[60])\n",
        "image, mask = explanation.get_image_and_mask(\n",
        "         model.predict(\n",
        "              X_train[60].reshape((1,120,120,3))\n",
        "         ).argmax(axis=1)[0],\n",
        "         positive_only=False,\n",
        "         hide_rest=False)\n",
        "plt.imshow(mark_boundaries(image, mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "c35b4848e9ed462fbe7753823a99b6be",
            "d8857b3345de442f9f59f451334d83fb",
            "1524705a36ed4c52a7fd7c03aaa85b24",
            "d4b6ac9f6f5346bebcee56c9682083bf",
            "2abb7308f76640feb40ad72472509e5b",
            "1b4be7c52c5241ec9f7631a7d5595873",
            "550965b0de494b2d88285001b306d3a1",
            "36baae01ecd6453b9a0d3cba1f11bef4",
            "2ed352875bea4a588bdc7a30e6b34165",
            "4a4f636e3049423f859c539d01849447",
            "92e83b04598441b1b5cf0d841bcd2900"
          ]
        },
        "id": "-9svRfAcTdSY",
        "outputId": "ac6a0c69-e148-4358-fa5d-77b5a1069105"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c35b4848e9ed462fbe7753823a99b6be"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 1s 976ms/step\n",
            "1/1 [==============================] - 0s 54ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 40ms/step\n",
            "1/1 [==============================] - 0s 40ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 52ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79a7fff32e30>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = lime_image.LimeImageExplainer(random_state=42)\n",
        "explanation = explainer.explain_instance(\n",
        "         X_train[0],\n",
        "         res_model.predict\n",
        ")\n",
        "plt.imshow(X_train[0])\n",
        "image, mask = explanation.get_image_and_mask(\n",
        "         res_model.predict(\n",
        "              X_train[0].reshape((1,120,120,3))\n",
        "         ).argmax(axis=1)[0],\n",
        "         positive_only=False,\n",
        "         hide_rest=False)\n",
        "plt.imshow(mark_boundaries(image, mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "df3a3dc7860242afba34c5f51ef4ea79",
            "daca027be10547c1b74fa6f91771abef",
            "4daf79aa2ead45eb9321cefbba8e4d09",
            "36f498e7c1774ce5a83297f52e6523de",
            "4d06208e4ff04dc99a51b47b77f353fe",
            "fff8743cc26940e398e0994c67830b82",
            "90d30fa1e7864e6cbde6af09c80426ca",
            "7e05c12229804743b4dd9dbd2be9c52d",
            "8a7a623e6ee04a6681e2f58a056d22c3",
            "99fcf57c1d0843a7914418c2e4d5849f",
            "7d21ba8b24d4401686516e3f9145c9c8"
          ]
        },
        "id": "_iz29ltxUFn6",
        "outputId": "eebb0c64-d9e0-43d7-c180-f313ff03a4ec"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "df3a3dc7860242afba34c5f51ef4ea79"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 43ms/step\n",
            "1/1 [==============================] - 0s 45ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 43ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 40ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79a7fffbdb10>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = lime_image.LimeImageExplainer(random_state=42)\n",
        "explanation = explainer.explain_instance(\n",
        "         X_train[10],\n",
        "         res_model.predict\n",
        ")\n",
        "plt.imshow(X_train[10])\n",
        "image, mask = explanation.get_image_and_mask(\n",
        "         res_model.predict(\n",
        "              X_train[10].reshape((1,120,120,3))\n",
        "         ).argmax(axis=1)[0],\n",
        "         positive_only=False,\n",
        "         hide_rest=False)\n",
        "plt.imshow(mark_boundaries(image, mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "f3ffbb686bda43b69fdf01a52b364948",
            "0de684dafc1d46c094a23ed36561d1b8",
            "85f91d9ff4934ada8521ab273591d3ad",
            "fd6c96e145a8441485ef5c8716e6d130",
            "c3485dafec104f7587c8cb1378e57c89",
            "4711c3bca0b34a74a8f36009d1fd74a0",
            "4469402283194fccacb1eb87e72409da",
            "fa6ca69fbfe44fb5976129637affabae",
            "d8f9f8b97f1d4bb08e7795500477e732",
            "bb32aff480384649bbe1a4c9a1fda37f",
            "b2f268c18b6e4df6bd2cd7c8498a14ad"
          ]
        },
        "id": "sEgGEK9fURKF",
        "outputId": "63c4e94e-2bf2-4b76-97a6-0c698a4bf9e0"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f3ffbb686bda43b69fdf01a52b364948"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 48ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 61ms/step\n",
            "1/1 [==============================] - 0s 81ms/step\n",
            "1/1 [==============================] - 0s 60ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 55ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 52ms/step\n",
            "1/1 [==============================] - 0s 51ms/step\n",
            "1/1 [==============================] - 0s 92ms/step\n",
            "1/1 [==============================] - 0s 45ms/step\n",
            "1/1 [==============================] - 0s 55ms/step\n",
            "1/1 [==============================] - 0s 48ms/step\n",
            "1/1 [==============================] - 0s 50ms/step\n",
            "1/1 [==============================] - 0s 47ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 62ms/step\n",
            "1/1 [==============================] - 0s 57ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 43ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 47ms/step\n",
            "1/1 [==============================] - 0s 43ms/step\n",
            "1/1 [==============================] - 0s 44ms/step\n",
            "1/1 [==============================] - 0s 40ms/step\n",
            "1/1 [==============================] - 0s 48ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n",
            "1/1 [==============================] - 0s 42ms/step\n",
            "1/1 [==============================] - 0s 46ms/step\n",
            "1/1 [==============================] - 0s 88ms/step\n",
            "1/1 [==============================] - 0s 70ms/step\n",
            "1/1 [==============================] - 0s 85ms/step\n",
            "1/1 [==============================] - 0s 98ms/step\n",
            "1/1 [==============================] - 0s 67ms/step\n",
            "1/1 [==============================] - 0s 77ms/step\n",
            "1/1 [==============================] - 0s 98ms/step\n",
            "1/1 [==============================] - 0s 116ms/step\n",
            "1/1 [==============================] - 0s 114ms/step\n",
            "1/1 [==============================] - 0s 86ms/step\n",
            "1/1 [==============================] - 0s 91ms/step\n",
            "1/1 [==============================] - 0s 91ms/step\n",
            "1/1 [==============================] - 0s 100ms/step\n",
            "1/1 [==============================] - 0s 90ms/step\n",
            "1/1 [==============================] - 0s 72ms/step\n",
            "1/1 [==============================] - 0s 103ms/step\n",
            "1/1 [==============================] - 0s 64ms/step\n",
            "1/1 [==============================] - 0s 54ms/step\n",
            "1/1 [==============================] - 0s 52ms/step\n",
            "1/1 [==============================] - 0s 71ms/step\n",
            "1/1 [==============================] - 0s 69ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 68ms/step\n",
            "1/1 [==============================] - 0s 77ms/step\n",
            "1/1 [==============================] - 0s 77ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 75ms/step\n",
            "1/1 [==============================] - 0s 59ms/step\n",
            "1/1 [==============================] - 0s 48ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 1s 517ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79a82103f130>"
            ]
          },
          "metadata": {},
          "execution_count": 74
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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1mvR0+BQgN0AWjaz9qfRwbwhKcmSJ7wBoZaDEJFF43jz9ZXLBRWSpLwlvssVyBoak/d8eN2E5XT3Wfuz8LYJObyQ6+KVINOcY7TfJN+JYuuRINhQO+S+Z0nXVj5RiyR5IYttj55vzqQIIYRkloqcSQ08rUvFDHj/rzS0jTUjseICkP2h/0ecxoCAvKjlTAqDM6l0bTiTsscxnDMpJNYzBFJtPJQWqdR1rciH1EC54hdeeGGYR0IIISQNO3bskKamJvPzqqhcXtODSH9/v7z66qsSRZFMnTpVXn75ZWlsbBzuYR0UcrmctLW1HVLHLHJoHveheMwiPO5D5bijKJIdO3ZIa2tr8P16Rc6kqqur5fDDD5dcLiciIo2NjYfERdUciscscmge96F4zCI87kOB0AxqABonCCGEZBY+pAghhGSWin5INTQ0yKWXXioNDQ3DPZSDxqF4zCKH5nEfiscswuM+1I67FBVpnCCEEHJoUNEzKUIIISMbPqQIIYRkFj6kCCGEZBY+pAghhGSWin1IrVu3To444ggZNWqUzJo1Sx5//PHhHlLZ6OjokBNOOEHGjx8vkydPltNPP122bdtW0GbPnj2yaNEimTRpkowbN07mz58vXV1dwzTioeGqq66SqqoqWbJkSX7dSD3uV155RT796U/LpEmTZPTo0XLMMcfIE088kf88iiJZtWqVTJkyRUaPHi1z586V559/fhhHnI6+vj5ZuXKlTJs2TUaPHi1/9Vd/JVdcccVbcr9V+jE//PDD8qEPfUhaW1ulqqpK7rvvvoLPkWN8/fXXZcGCBdLY2CgTJkyQz3/+87Jz586DeBTDTFSB3H333VF9fX30n//5n9Gvf/3r6Atf+EI0YcKEqKura7iHVhbmzZsX3X777dEzzzwTPf3009EHPvCBaOrUqdHOnTvzbb74xS9GbW1t0YYNG6Innngieu973xuddNJJwzjq8vL4449HRxxxRPSud70rOuecc/LrR+Jxv/7669E73vGO6DOf+Uy0efPm6IUXXoh++tOfRr/73e/yba666qqoqakpuu+++6Jf/vKX0b/8y79E06ZNi958881hHHly1q5dG02aNCm6//77oxdffDG65557onHjxkVf/epX821GwjH/+Mc/ji6++OLo+9//fiQi0b333lvwOXKMp556anTsscdGjz32WPSLX/wi+uu//uvok5/85EE+kuGjIh9SJ554YrRo0aL83319fVFra2vU0dExjKMaOrZv3x6JSLRx48YoiqKou7s7qquri+655558m2effTYSkWjTpk3DNcyysWPHjmj69OnRgw8+GP393/99/iE1Uo/7wgsvjE4++WTz8/7+/qilpSW69tpr8+u6u7ujhoaG6Dvf+c7BGGLZOe2006LPfe5zBes+8pGPRAsWLIiiaGQec/whhRzjb37zm0hEoi1btuTb/OQnP4mqqqqiV1555aCNfTipOLlv7969snXrVpk7d25+XXV1tcydO1c2bdo0jCMbOnp6ekREZOLEiSIisnXrVtm3b1/BOZgxY4ZMnTp1RJyDRYsWyWmnnVZwfCIj97h/+MMfysyZM+VjH/uYTJ48WY477ji57bbb8p+/+OKL0tnZWXDcTU1NMmvWrIo97pNOOkk2bNggzz33nIiI/PKXv5RHHnlE3v/+94vIyDzmOMgxbtq0SSZMmCAzZ87Mt5k7d65UV1fL5s2bD/qYh4OKSzD72muvSV9fnzQ3Nxesb25ult/+9rfDNKqho7+/X5YsWSJz5syRo48+WkREOjs7pb6+XiZMmFDQtrm5WTo7O4dhlOXj7rvvlieffFK2bNnyls9G6nG/8MILcvPNN8vSpUvloosuki1btsjZZ58t9fX1snDhwvyxFfvOV+pxL1++XHK5nMyYMUNqamqkr69P1q5dKwsWLBARGZHHHAc5xs7OTpk8eXLB57W1tTJx4sQRcx5KUXEPqUONRYsWyTPPPCOPPPLIcA9lyHn55ZflnHPOkQcffFBGjRo13MM5aPT398vMmTPlyiuvFBGR4447Tp555hm55ZZbZOHChcM8uqHhe9/7ntx5551y1113yTvf+U55+umnZcmSJdLa2jpij5kko+LkvsMOO0xqamre4ujq6uqSlpaWYRrV0LB48WK5//775Wc/+5kcfvjh+fUtLS2yd+9e6e7uLmhf6edg69atsn37dnnPe94jtbW1UltbKxs3bpSbbrpJamtrpbm5eUQe95QpU+Soo44qWHfkkUfKSy+9JCKSP7aR9J2/4IILZPny5XLGGWfIMcccI//2b/8m5557rnR0dIjIyDzmOMgxtrS0yPbt2ws+379/v7z++usj5jyUouIeUvX19XL88cfLhg0b8uv6+/tlw4YNMnv27GEcWfmIokgWL14s9957rzz00EMybdq0gs+PP/54qaurKzgH27Ztk5deeqmiz8Epp5wiv/rVr+Tpp5/O/5s5c6YsWLAgvzwSj3vOnDlvCTF47rnn5B3veIeIiEybNk1aWloKjjuXy8nmzZsr9rh37979lkJ3NTU1+TLjI/GY4yDHOHv2bOnu7patW7fm2zz00EPS398vs2bNOuhjHhaG27mRhLvvvjtqaGiI7rjjjug3v/lNdOaZZ0YTJkyIOjs7h3toZeFLX/pS1NTUFP385z+P/vjHP+b/7d69O9/mi1/8YjR16tTooYceip544olo9uzZ0ezZs4dx1EODdvdF0cg87scffzyqra2N1q5dGz3//PPRnXfeGY0ZMyb69re/nW9z1VVXRRMmTIh+8IMfRP/zP/8TffjDH644O7Zm4cKF0V/8xV/kLejf//73o8MOOyxatmxZvs1IOOYdO3ZETz31VPTUU09FIhLdcMMN0VNPPRX9/ve/j6IIO8ZTTz01Ou6446LNmzdHjzzySDR9+nRa0CuBr33ta9HUqVOj+vr66MQTT4wee+yx4R5S2RCRov9uv/32fJs333wz+vKXvxy97W1vi8aMGRP967/+a/THP/5x+AY9RMQfUiP1uH/0ox9FRx99dNTQ0BDNmDEjuvXWWws+7+/vj1auXBk1NzdHDQ0N0SmnnBJt27ZtmEabnlwuF51zzjnR1KlTo1GjRkV/+Zd/GV188cVRb29vvs1IOOaf/exnRX/LCxcujKIIO8Y///nP0Sc/+clo3LhxUWNjY/TZz3422rFjxzAczfDAUh2EEEIyS8W9kyKEEHLowIcUIYSQzMKHFCGEkMzChxQhhJDMwocUIYSQzMKHFCGEkMzChxQhhJDMwocUIYSQzMKHFCGEkMzChxQhhJDMwocUIYSQzMKHFCGEkMzy/wFfNpLiRe6bEQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "explainer = lime_image.LimeImageExplainer(random_state=42)\n",
        "explanation = explainer.explain_instance(\n",
        "         X_test[3],\n",
        "         res_model.predict\n",
        ")\n",
        "plt.imshow(X_test[3])\n",
        "image, mask = explanation.get_image_and_mask(\n",
        "         res_model.predict(\n",
        "              X_test[3].reshape((1,120,120,3))\n",
        "         ).argmax(axis=1)[0],\n",
        "         positive_only=False,\n",
        "         hide_rest=False)\n",
        "plt.imshow(mark_boundaries(image, mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "89641d74d9954a31bbde5f45c2824e80",
            "6acdc1c55d0d4bec814f3ce5378e0c24",
            "f0f8c816a65a413a9f09830565ab047c",
            "b3903a96041a42d4b1d02b7d350ee44a",
            "f178851dbcb448eab6c12c09fcab26c5",
            "9dce20108f014fea82dfb6ecd972f5be",
            "8aacc47a4ba249c2afa78b435f47040b",
            "1ebcb691aa184a2fbf9e414624dd49c1",
            "fc337092bfa54ee48312d9820d91c622",
            "dcd765989be645ce8b2c6260ca974ba0",
            "22ddd8463ec046a5832e3baba0d819f1"
          ]
        },
        "id": "Z6PlNk3FTqYC",
        "outputId": "47cb035b-1a9c-4fc3-9d80-c9eb29e7a987"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "89641d74d9954a31bbde5f45c2824e80"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 29ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 30ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 32ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 38ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 39ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 44ms/step\n",
            "1/1 [==============================] - 0s 36ms/step\n",
            "1/1 [==============================] - 0s 34ms/step\n",
            "1/1 [==============================] - 0s 35ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 33ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 37ms/step\n",
            "1/1 [==============================] - 0s 41ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79a80ddf8e20>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Nv014khMT17P"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}